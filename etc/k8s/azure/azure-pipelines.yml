trigger:
  branches:
    include:
      - main
  paths:
    include:
      - apps/angular/src/**
      - apps/public-web/src/Walsun.Erp.PublicWeb/**
      - gateways/web/src/Walsun.Erp.WebGateway/**
      - gateways/web-public/src/Walsun.Erp.WebPublicGateway/**
      - services/administration/src/**
      - services/basket/src/**
      - services/catalog/src/**
      - services/cmskit/src/**
      - services/identity/src/**
      - services/ordering/src/**
      - services/payment/src/**

resources:
  repositories:
    - repository: devops
      type: github
      endpoint: github.com_skoc10
      name: volosoft/devops
      ref: master

variables:
  dockerRegistryServiceConnection: 'volosoft-reg'
  buildContextBasePath: '$(Build.SourcesDirectory)'
  tag: $(Build.BuildNumber)
  DOCKER_BUILDKIT: 1

pool:
  name: aks-deployer-agent

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Build
    displayName: Build and Deploy Microservices
    pool:
      name: aks-deployer-agent
    steps:
    - checkout: self
    - checkout: devops

    - script: |
        function hasChanged {
          local path=$1
          if git diff --name-only HEAD HEAD~1 | grep -q $path; then
            echo "true"
          else
            echo "false"
          fi
        }
        echo "##vso[task.setvariable variable=hasChangedAngular]$(hasChanged 'apps/angular/src/')"
        echo "##vso[task.setvariable variable=hasChangedPublicWeb]$(hasChanged 'apps/public-web/src/Walsun.Erp.PublicWeb/')"
        echo "##vso[task.setvariable variable=hasChangedWebGateway]$(hasChanged 'gateways/web/src/Walsun.Erp.WebGateway/')"
        echo "##vso[task.setvariable variable=hasChangedWebPublicGateway]$(hasChanged 'gateways/web-public/src/Walsun.Erp.WebPublicGateway/')"
        echo "##vso[task.setvariable variable=hasChangedAdministration]$(hasChanged 'services/administration/src/')"
        echo "##vso[task.setvariable variable=hasChangedBasket]$(hasChanged 'services/basket/src/')"
        echo "##vso[task.setvariable variable=hasChangedCatalog]$(hasChanged 'services/catalog/src/')"
        echo "##vso[task.setvariable variable=hasChangedCmsKit]$(hasChanged 'services/cmskit/src/')"
        echo "##vso[task.setvariable variable=hasChangedIdentity]$(hasChanged 'services/identity/src/')"
        echo "##vso[task.setvariable variable=hasChangedOrdering]$(hasChanged 'services/ordering/src/')"
        echo "##vso[task.setvariable variable=hasChangedPayment]$(hasChanged 'services/payment/src/')"
      displayName: 'Check if the services have changed'

# Angular App
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedAngular'], 'true'))
      displayName: 'Build Angular App'
      inputs:
        command: build
        repository: walsunerp/app-web
        dockerfile: $(buildContextBasePath)/Walsun.Erp/apps/angular/Dockerfile.azure
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedAngular'], 'true'))
      displayName: 'Push Angular App'
      inputs:
        command: push
        repository: walsunerp/app-web
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: HelmDeploy@0
      #condition: and(succeeded(), eq(variables['hasChangedAngular'], 'true'))
      displayName: 'Deploy Angular App'
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: 'aks-demoms'
        namespace: 'erp'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: 'devops/walsunerp/k8s/walsunerp-istio/charts/web'
        releaseName: 'web'
        overrideValues: 'image.tag=$(tag)'
        valueFile: 'devops/walsunerp/k8s/walsunerp-istio/charts/web/values.yaml'
        waitForExecution: false

# Public Web
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedPublicWeb'], 'true'))
      displayName: 'Build Public Web'
      inputs:
        command: build
        repository: walsunerp/app-publicweb
        dockerfile: $(buildContextBasePath)/Walsun.Erp/apps/public-web/src/Walsun.Erp.PublicWeb/Dockerfile.azure
        buildContext: $(buildContextBasePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedPublicWeb'], 'true'))
      displayName: 'Push Public Web'
      inputs:
        command: push
        repository: walsunerp/app-publicweb
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: HelmDeploy@0
      #condition: and(succeeded(), eq(variables['hasChangedPublicWeb'], 'true'))
      displayName: 'Deploy Public Web'
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: 'aks-demoms'
        namespace: 'erp'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: 'devops/walsunerp/k8s/walsunerp-istio/charts/public-web'
        releaseName: 'public-web'
        overrideValues: 'image.tag=$(tag)'
        valueFile: 'devops/walsunerp/k8s/walsunerp-istio/charts/public-web/values.yaml'
        waitForExecution: false

# Web Gateway
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedWebGateway'], 'true'))
      displayName: 'Build Web Gateway'
      inputs:
        command: build
        repository: walsunerp/gateway-web
        dockerfile: $(buildContextBasePath)/Walsun.Erp/gateways/web/src/Walsun.Erp.WebGateway/Dockerfile.azure
        buildContext: $(buildContextBasePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedWebGateway'], 'true'))
      displayName: 'Push Web Gateway'
      inputs:
        command: push
        repository: walsunerp/gateway-web
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: HelmDeploy@0
      #condition: and(succeeded(), eq(variables['hasChangedWebGateway'], 'true'))
      displayName: 'Deploy Web Gateway'
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: 'aks-demoms'
        namespace: 'erp'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: 'devops/walsunerp/k8s/walsunerp-istio/charts/gateway-web'
        releaseName: 'web-gateway'
        overrideValues: 'image.tag=$(tag)'
        valueFile: 'devops/walsunerp/k8s/walsunerp-istio/charts/gateway-web/values.yaml'
        waitForExecution: false

# Web Public Gateway
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedWebPublicGateway'], 'true'))
      displayName: 'Build Web Public Gateway'
      inputs:
        command: build
        repository: walsunerp/gateway-web-public
        dockerfile: $(buildContextBasePath)/Walsun.Erp/gateways/web-public/src/Walsun.Erp.WebPublicGateway/Dockerfile.azure
        buildContext: $(buildContextBasePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedWebPublicGateway'], 'true'))
      displayName: 'Push Web Public Gateway'
      inputs:
        command: push
        repository: walsunerp/gateway-web-public
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: HelmDeploy@0
      #condition: and(succeeded(), eq(variables['hasChangedWebPublicGateway'], 'true'))
      displayName: 'Deploy Web Public Gateway'
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: 'aks-demoms'
        namespace: 'erp'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: 'devops/walsunerp/k8s/walsunerp-istio/charts/gateway-web-public'
        releaseName: 'web-public-gateway'
        overrideValues: 'image.tag=$(tag)'
        valueFile: 'devops/walsunerp/k8s/walsunerp-istio/charts/gateway-web-public/values.yaml'
        waitForExecution: false

# Administration
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedAdministration'], 'true'))
      displayName: 'Build Administration'
      inputs:
        command: build
        repository: walsunerp/service-administration
        dockerfile: $(buildContextBasePath)/Walsun.Erp/services/administration/src/Walsun.Erp.AdministrationService.HttpApi.Host/Dockerfile.azure
        buildContext: $(buildContextBasePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedAdministration'], 'true'))
      displayName: 'Push Administration'
      inputs:
        command: push
        repository: walsunerp/service-administration
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: HelmDeploy@0
      #condition: and(succeeded(), eq(variables['hasChangedAdministration'], 'true'))
      displayName: 'Deploy Administration'
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: 'aks-demoms'
        namespace: 'erp'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: 'devops/walsunerp/k8s/walsunerp-istio/charts/administration'
        releaseName: 'administration'
        overrideValues: 'image.tag=$(tag)'
        valueFile: 'devops/walsunerp/k8s/walsunerp-istio/charts/administration/values.yaml'
        waitForExecution: false

# Basket
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedBasket'], 'true'))
      displayName: 'Build Basket'
      inputs:
        command: build
        repository: walsunerp/service-basket
        dockerfile: $(buildContextBasePath)/Walsun.Erp/services/basket/src/Walsun.Erp.BasketService/Dockerfile.azure
        buildContext: $(buildContextBasePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedBasket'], 'true'))
      displayName: 'Push Basket'
      inputs:
        command: push
        repository: walsunerp/service-basket
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: HelmDeploy@0
      #condition: and(succeeded(), eq(variables['hasChangedBasket'], 'true'))
      displayName: 'Deploy Basket'
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: 'aks-demoms'
        namespace: 'erp'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: 'devops/walsunerp/k8s/walsunerp-istio/charts/basket'
        releaseName: 'basket'
        overrideValues: 'image.tag=$(tag)'
        valueFile: 'devops/walsunerp/k8s/walsunerp-istio/charts/basket/values.yaml'
        waitForExecution: false

# Catalog
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedCatalog'], 'true'))
      displayName: 'Build Catalog'
      inputs:
        command: build
        repository: walsunerp/service-catalog
        dockerfile: $(buildContextBasePath)/Walsun.Erp/services/catalog/src/Walsun.Erp.CatalogService.HttpApi.Host/Dockerfile.azure
        buildContext: $(buildContextBasePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedCatalog'], 'true'))
      displayName: 'Push Catalog'
      inputs:
        command: push
        repository: walsunerp/service-catalog
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: HelmDeploy@0
      #condition: and(succeeded(), eq(variables['hasChangedCatalog'], 'true'))
      displayName: 'Deploy Catalog'
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: 'aks-demoms'
        namespace: 'erp'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: 'devops/walsunerp/k8s/walsunerp-istio/charts/catalog'
        releaseName: 'catalog'
        overrideValues: 'image.tag=$(tag)'
        valueFile: 'devops/walsunerp/k8s/walsunerp-istio/charts/catalog/values.yaml'
        waitForExecution: false

# cmskit
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedCmsKit'], 'true'))
      displayName: 'Build CmsKit'
      inputs:
        command: build
        repository: walsunerp/service-cmskit
        dockerfile: $(buildContextBasePath)/Walsun.Erp/services/cmskit/src/Walsun.Erp.CmskitService.HttpApi.Host/Dockerfile.azure
        buildContext: $(buildContextBasePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedCmsKit'], 'true'))
      displayName: 'Push CmsKit'
      inputs:
        command: push
        repository: walsunerp/service-cmskit
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: HelmDeploy@0
      #condition: and(succeeded(), eq(variables['hasChangedCmsKit'], 'true'))
      displayName: 'Deploy CmsKit'
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: 'aks-demoms'
        namespace: 'erp'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: 'devops/walsunerp/k8s/walsunerp-istio/charts/cmskit'
        releaseName: 'cmskit'
        overrideValues: 'image.tag=$(tag)'
        valueFile: 'devops/walsunerp/k8s/walsunerp-istio/charts/cmskit/values.yaml'
        waitForExecution: false

# Identity
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedIdentity'], 'true'))
      displayName: 'Build Identity'
      inputs:
        command: build
        repository: walsunerp/service-identity
        dockerfile: $(buildContextBasePath)/Walsun.Erp/services/identity/src/Walsun.Erp.IdentityService.HttpApi.Host/Dockerfile.azure
        buildContext: $(buildContextBasePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedIdentity'], 'true'))
      displayName: 'Push Identity'
      inputs:
        command: push
        repository: walsunerp/service-identity
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: HelmDeploy@0
      #condition: and(succeeded(), eq(variables['hasChangedIdentity'], 'true'))
      displayName: 'Deploy Identity'
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: 'aks-demoms'
        namespace: 'erp'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: 'devops/walsunerp/k8s/walsunerp-istio/charts/identity'
        releaseName: 'identity'
        overrideValues: 'image.tag=$(tag)'
        valueFile: 'devops/walsunerp/k8s/walsunerp-istio/charts/identity/values.yaml'
        waitForExecution: false

# Ordering
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedOrdering'], 'true'))
      displayName: 'Build Ordering'
      inputs:
        command: build
        repository: walsunerp/service-ordering
        dockerfile: $(buildContextBasePath)/Walsun.Erp/services/ordering/src/Walsun.Erp.OrderingService.HttpApi.Host/Dockerfile.azure
        buildContext: $(buildContextBasePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedOrdering'], 'true'))
      displayName: 'Push Ordering'
      inputs:
        command: push
        repository: walsunerp/service-ordering
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: HelmDeploy@0
      #condition: and(succeeded(), eq(variables['hasChangedOrdering'], 'true'))
      displayName: 'Deploy Ordering'
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: 'aks-demoms'
        namespace: 'erp'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: 'devops/walsunerp/k8s/walsunerp-istio/charts/ordering'
        releaseName: 'ordering'
        overrideValues: 'image.tag=$(tag)'
        valueFile: 'devops/walsunerp/k8s/walsunerp-istio/charts/ordering/values.yaml'
        waitForExecution: false

# Payment
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedPayment'], 'true'))
      displayName: 'Build Payment'
      inputs:
        command: build
        repository: walsunerp/service-payment
        dockerfile: $(buildContextBasePath)/Walsun.Erp/services/payment/src/Walsun.Erp.PaymentService.HttpApi.Host/Dockerfile.azure
        buildContext: $(buildContextBasePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      #condition: and(succeeded(), eq(variables['hasChangedPayment'], 'true'))
      displayName: 'Push Payment'
      inputs:
        command: push
        repository: walsunerp/service-payment
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: HelmDeploy@0
      #condition: and(succeeded(), eq(variables['hasChangedPayment'], 'true'))
      displayName: 'Deploy Payment'
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceConnection: 'aks-demoms'
        namespace: 'erp'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: 'devops/walsunerp/k8s/walsunerp-istio/charts/payment'
        releaseName: 'payment'
        overrideValues: 'image.tag=$(tag)'
        valueFile: 'devops/walsunerp/k8s/walsunerp-istio/charts/payment/values.yaml'
        waitForExecution: false